<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true">
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
    <!--<property name="LOG_HOME" value="logs" />-->
    <springProperty scope="context" name="LOG_NAME" source="logging.name" defaultValue="application"/>
    <springProperty scope="context" name="LOG_HOME" source="logging.path" defaultValue="logs"/>
    <springProperty scope="context" name="GELF_HOST" source="logging.gelf.host" defaultValue="128.0.255.104"/>
    <springProperty scope="context" name="GELF_PORT" source="logging.gelf.port" defaultValue="12201"/>
    <springProperty scope="context" name="LOG_PATTERN" source="logging.pattern.console"
                    defaultValue="%date{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %highlight(%-5level) %green(%logger{64})  -%X{logTraceId} - %msg%n"/>

    <!-- ConsoleAppender, 将日志输出到控制台 . 有encoder和target两个子节点(新版本有filter子节点) -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 子节点encoder , 指定日志输出的格式 , 具体格式配置见下方表格 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
            <pattern>${LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
        <!-- 子节点target, 日志输出的对象 System.out 或 System.err -->
        <!--<target></target>-->
    </appender>

    <!-- 滚动将日志输出到切分的日志文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 按照每天与文件大小切分生成日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件输出的文件名 -->
            <FileNamePattern>${LOG_HOME}/${LOG_NAME}-%d{yyyyMMdd}-%i.log.gz</FileNamePattern>
            <!-- 日志文件保留天数 -->
            <MaxHistory>7</MaxHistory>
            <!-- 日志文件最大的大小 -->
            <MaxFileSize>100MB</MaxFileSize>
            <!-- 子节点totalSizeCap日志文件上限, 超过后会删除旧的归档日志文件(在1.1.6版本后才开始支持) -->
            <totalSizeCap>2GB</totalSizeCap>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{64}) -%X{logTraceId} - %msg%n</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
        <!--日志文件最大的大小 -->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>-->
    </appender>

    <!-- 输出GELF日志 -->
    <appender name="GELF" class="biz.paluch.logging.gelf.logback.GelfLogbackAppender">
        <host>udp:${GELF_HOST}</host>
        <port>${GELF_PORT}</port>
        <version>1.1</version>
        <facility>${LOG_NAME}</facility>
        <extractStackTrace>true</extractStackTrace>
        <filterStackTrace>true</filterStackTrace>
        <mdcProfiling>true</mdcProfiling>
        <timestampPattern>yyyy-MM-dd HH:mm:ss,SSS</timestampPattern>
        <maximumMessageSize>8192</maximumMessageSize>
        <!-- This are static fields -->
        <additionalFields>fieldName1=fieldValue1,fieldName2=fieldValue2</additionalFields>
        <!-- Optional: Specify field types -->
        <additionalFieldTypes>fieldName1=String,fieldName2=Double,fieldName3=Long</additionalFieldTypes>

        <!-- This are fields using MDC -->
        <mdcFields>mdcField1,mdcField2</mdcFields>
        <dynamicMdcFields>mdc.*,(mdc|MDC)fields</dynamicMdcFields>
        <includeFullMdc>true</includeFullMdc>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <!-- root也是logger元素, 它是根logger, 只有一个level属性-->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <!--<appender-ref ref="FILE"/>-->
        <appender-ref ref="GELF"/>
    </root>

    <!-- logger是用来设置某个包或者具体的某个类的日志输出级别, 以及制定的appender -->
    <!--       name：用来指定此logger约束的某一个包或者具体的某一个类 -->
    <!--      level：用来设置输出级别 -->
    <!-- additivity：是否向上级logger传递打印信息, 默认是true -->
    <!--<logger name="cn.takujo.common" level="INFO" additivity="false">-->
    <!--<appender-ref ref="STDOUT"/>-->
    <!--</logger>-->
</configuration>
